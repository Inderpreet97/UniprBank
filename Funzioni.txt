Menù direttore:
1)Amministrazione filiale
	1.1)Cambiare dati filiale (nome, indirizzo ecc...)
		WCFClient.getFiliale(string username); -> getIdFilial
		bool ModificaDatiFiliale(string idFiliale, Filiale nuovaFiliale) -> idFililae = id della filiale da modificare,
										    filiale = oggetto filiale con i dati nuovi
	1.2)string WCFClient.getIdFilialeByUsername(username) -> restuisce la filiale dell'username
2)Amministrazione impiegati
	2.0)Lista impiegati -> List<Persona> WCFClient.getListaClienti(string username) -> fornisce la lista completa degli impiegati che lavorano nella filiale 					in cui lavora il direttore (occore anche per impiegati avere un associazione con la tabella Filiale)

	2.1)Elimina impiegato -> bool WCFCLient.EliminaImpiegato(string username); stessa logica di sospendi impiegato    

	2.2)Aggiungi impiegato -> bool WCFClient.CheckUsername(string UsernameImpiegato) -> True se già utilizzato, false se disponibile
			       -> bool WCFClient.AggiungiPersona(Persona p, string password) -> True successo operazione, false il contrario

	2.3)Modifica Dati Impiegato -> bool WCFClient.EseguiModifichePersona(string identificativo, Persona persona)
				Funzionamento: identificativo-> puoi metterci sia il codice fiscale che l'username della
							persona da modificare, ci penserò io capire cosa stai usando.
					       persona -> Contiene i dati da modificare della persona identificata
3)Amministrazione clienti
	3.0)Visualizza lista clienti -> List <Persona> WCFClient.GetListaPersone(string tipoAccount, string idFiliale);
					 restituisce la lista dei clienti di tipo Persona: tipoAccount = "cliente"
	3.1)Registrare persona/account -> stessa funzione di aggiungiImpiegato solo che il paramatro passato come argomento è il privilegio "cliente"
	3.2)Creare un conto corrente -> Modificare codice SQL per aggiungere IDCONTOCORRENTE IN AUTOMATICO
				     -> WCFClient.getIdFiliale(string addetto) -> ottiene l'id della filiale dall'username del direttore o dell'impiegato che effettua la 				        registrazione del nuovo conto corrente	
				     -> WCFCLient.aggiungiContoCorrente(ContoCorrente contoCorrente) -> aggiunge il conto corrente al db e restituisce true se operazione 				        riuscita, false il contrario	
	3.3)Modifica persona/account -> bool WCFClient.ModificaPersona(string currentUsername, Persona p)
	3.4)Modificare conto corrente (Funzione non implementata) -> bool WCFClient.checkContoCorrente(int idContoCorrente)
					     			  -> ContoCorrente WCFCLient.getContoCorrente(int idContoCorrente)
	3.5)Visualizza lista clienti -> List<Persona> WCFCLient.GetListaClienti(
					string WCFClient.GetIdFiliale(string username) -> Get id filiale sapendo l'username dell'impiegato/direttore che vuole
											 ottenere la lista dei clienti
	3.6)Visualizzare lista movimenti di un cliente -> List<Movimento> getListaMovimenti(int idContoCorrente); -> restituisce la lista dei movimenti del conto corrente
							  con quel idContoCorrente
	3.7)Effettuare movimento di un cliente
4)Modifica profilo direttore
	4.1)Cambia anagrafe direttore

Menu impiegato:
1.1)Registrare persona/account
1.2)Creare un conto corrente
1.3)Modifica persona/account
1.4)Modificare conto corrente (IBAN)
1.5)Visualizza lista clienti e relativo saldo
1.6)Visualizzare lista movimenti di un cliente
1.7)Effettuare movimento di un cliente
1.8)Modifica profilo impiegato (anagrafe)

Menu cliente
1)Visualizzare lista movimenti
2)Movimenti -> WCFCLient.checkIBAN(string IBAN) -> true se l'iban esiste, false in caso contrario
	       WCFClient.checkImporto(decimal Importo, string IBANCommittente) -> controlla se il saldo ricopre l'importo del bonifico
	       WCFClient.checkIDConto(int idContoCorrente) -> controlla se esiste un conto Corrente con quell'ID
	2.1)Bonifico -> WCFClient.EseguiBonifico(string IBANCommittente, string IBANBeneficiario, decimal Importo); true (bonifico avvenuto) false (caso contrario);   
	2.2)Prelievo -> WCFClient.EseguiPrelievoDenaro(int idContoCorrente, decimal importo) true (avvenuto), false (non avvenuto)
	2.3)Deposito -> WCFClient.EseguiDeposito(idContoCorrente, importo); true (avvenuto), false (non avvenuto)
3)Modifica profilo Cliente(anagrafe)


Altre funzioni: string WCFClient.GetNameFiliale(string idFiliale) -> restituisce il nome della filiale che ha quel determinato IDFiliale